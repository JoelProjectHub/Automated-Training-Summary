# -*- coding: utf-8 -*-
"""TrainingSummary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B6Pu3l9N63Uf_wra3nHIFWEq-cVbvwrb
"""

import pandas as pd
import numpy as np
import streamlit as st
import io

st.set_page_config(page_title="Training Status Pivot", layout="wide")
st.title("Training Status Pivot Builder")

st.markdown("""
Upload your data, map the columns, and get a pivot table of **Facility × Status** (Expired/Pending) with counts.
""")

uploaded = st.file_uploader("Upload an Excel or CSV file", type=["xlsx", "xls", "csv"])

def read_file(file):
  name = file.name.lower()
  if name.endswith(".csv"):
    return pd.read_csv(file)

  xl = pd.ExcelFile(file)
  sheet = st.selectbox("Choose a sheet", xl.sheet_names, index=0)

if uploaded:
  try:
    df = read_file(uploaded)
  except Exception as e:
    st.error(f"Error reading file: {e}")
    st.stop()

  df["Trained"] = pd.to_datetime(df["Trained"], errors="coerce")
  df["Training Due"] = pd.to_datetime(df["Training Due"], errors="coerce")
    
  df["Past Due?"] = (np.isna(df["Trained"])) & (df["Training Due"] <= pd.Timestamp.now())
  df["Status"] = df["Past Due?"].map({True: "Expired", False: "Pending"})

  pivot = pd.pivot_table(df, values="Training Due", index="Compound", columns="Status", aggfunc="count", fill_value=0)

  st.dataframe(pivot, use_container_width=True)
  st.subheader("Download results")

  csv_bytes = pivot.reset_index().to_csv(index=False).encode("utf-8")
  st.download_button(
      label="⬇️ Download CSV",
      data=csv_bytes,
      file_name="training_status_pivot.csv",
      mime="text/csv"
  )

  # Excel
  excel_buf = io.BytesIO()
  with pd.ExcelWriter(excel_buf, engine="xlsxwriter") as writer:
      pivot.reset_index().to_excel(writer, index=False, sheet_name="Pivot")
  st.download_button(
      label="⬇️ Download Excel",
      data=excel_buf.getvalue(),
      file_name="training_status_pivot.xlsx",
      mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
  )

else:
    st.info("Upload an Excel or CSV to get started.")

